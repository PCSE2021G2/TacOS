*** 定数 ***

*** BSSセグメント ***

*** ヘッダ ***
magic = 0107
text  = 009e
data  = 0000
bss   = 0000
syms  = 0020
entry = 0000
trsize= 0018
drsize= 0000

*** TEXTセグメント ***
0000          	_yield
0000 c000     	        push    g0              ; FLAG の保存場所を準備する
0002 c000     	        push    g0              ; G0 を保存
0004 1400     	        ld      g0,flag         ; FLAG を上で準備した位置に保存
0006 110d 0002	        st      g0,2,sp         ;
000a c010     	        push    g1              ; G1 を保存
000c c020     	        push    g2              ; G2 を保存
000e c030     	        push    g3              ; G3 を保存
0010 c040     	        push    g4              ; G4 を保存
0012 c050     	        push    g5              ; G5 を保存
0014 c060     	        push    g6              ; G6 を保存
0016 c070     	        push    g7              ; G7 を保存
0018 c080     	        push    g8              ; G8 を保存
001a c090     	        push    g9              ; G9 を保存
001c c0a0     	        push    g10             ; G10 を保存
001e c0b0     	        push    g11             ; G11 を保存
0020 c0c0     	        push    fp              ; フレームポインタ(G12)を保存
0022 c0e0     	        push    usp             ; ユーザモードスタックポインタ(G14)を保存
0024 0810 0000	        ld      g1,_curProc     ; G1 <- curProc
0028 16d1     	        st      sp,0,g1         ; [G1+0] は PCB の sp フィールド
002a 0901 001e	        ld      g0,30,g1        ; [G1+30] は PCB の magic フィールド
002e 2a00 abcd	        cmp     g0,#0xabcd      ; P_MAGIC と比較、一致しなければ
0032 a080 0072	        jnz     .stkOverFlow    ; カーネルスタックがオーバーフローしている
0036          	_dispatch
0036 0800 0000	        ld      g0,_readyQueue  ; 実行可能列の番兵のアドレス
003a 0900 001c	        ld      g0,28,g0        ; [G0+28] は PCB の next フィールド(先頭の PCB)
003e 1000 0000	        st      g0,_curProc     ; 現在のプロセス(curProc)に設定する
0042 0ed0     	        ld      sp,0,g0         ; PCB から SP を取り出す
0044 0910 0010	        ld      g1,16,g0        ; PCB から memBase を取り出す
0048 b810 00f4	        out     g1,0xf4         ; Base レジスタに格納
004c 0910 0012	        ld      g1,18,g0        ; PCB から memLen を取り出す
0050 b810 00f6	        out     g1,0xf6         ; Limit レジスタに格納
0054 c4e0     	        pop     usp             ; ユーザモードスタックポインタ(G14)を復元
0056 c4c0     	        pop     fp              ; フレームポインタ(G12)を復元
0058 c4b0     	        pop     g11             ; G11 を復元
005a c4a0     	        pop     g10             ; G10 を復元
005c c490     	        pop     g9              ; G9 を復元
005e c480     	        pop     g8              ; G8 を復元
0060 c470     	        pop     g7              ; G7 を復元
0062 c460     	        pop     g6              ; G6 を復元
0064 c450     	        pop     g5              ; G5 を復元
0066 c440     	        pop     g4              ; G4 を復元
0068 c430     	        pop     g3              ; G3 を復元
006a c420     	        pop     g2              ; G2 を復元
006c c410     	        pop     g1              ; G1 を復元
006e c400     	        pop     g0              ; G0 を復元
0070 d400     	        reti                    ; RETI 命令で一度に POP して復元する
0072          	.stkOverFlow
0072 c0d0     	        push    sp
0074 0a00 007e	        ld      g0,#.L1         ; "kernel:stack overflow" を
0078 c000     	        push    g0              ;  スタックに積む
007a a800 0000	        call    _panic          ; panic("kernel:stack overflow(sp=%04x)")
007e 6b 65 72	.L1     string  "kernel:stack overflow(sp=%04x)"
0081 6e 65 6c
0084 3a 73 74
0087 61 63 6b
008a 20 6f 76
008d 65 72 66
0090 6c 6f 77
0093 28 73 70
0096 3d 25 30
0099 34 78 29
009c 00
009d 00

*** DATAセグメント ***

*** 再配置表 ***
TR領域
Addr	Name	Type	No.
0026	_curProc	UNDF	  2
0034	.stkOverFlow	TEXT	  3
0038	_readyQueue	UNDF	  5
0040	_curProc	UNDF	  2
0076	.L1	TEXT	  6
007c	_panic	UNDF	  7

DR領域
Addr	Name	Type	No.

*** 名前表 ***
No.	Name	Type	Value	Offset
0	@dispatcher.s	TEXT	0000	0000
1	_yield	TEXT	0000	000e
2	_curProc	UNDF	0000	0015
3	.stkOverFlow	TEXT	0072	001e
4	_dispatch	TEXT	0036	002b
5	_readyQueue	UNDF	0000	0035
6	.L1	TEXT	007e	0041
7	_panic	UNDF	0000	0045

*** 文字列表 ***
Offset	String
0000	@dispatcher.s
000e	_yield
0015	_curProc
001e	.stkOverFlow
002b	_dispatch
0035	_readyQueue
0041	.L1
0045	_panic
