/*
 * TacOS Source Code
 *    Tokuyama kousen Advanced educational Computer.
 *
 * Copyright (C) 2019 by
 *                      Dept. of Computer Science and Electronic Engineering,
 *                      Tokuyama College of Technology, JAPAN
 *
 *   上記著作権者は，Free Software Foundation によって公開されている GNU 一般公
 * 衆利用許諾契約書バージョン２に記述されている条件を満たす場合に限り，本ソース
 * コード(本ソースコードを改変したものを含む．以下同様)を使用・複製・改変・再配
 * 布することを無償で許諾する．
 *
 *   本ソースコードは＊全くの無保証＊で提供されるものである。上記著作権者および
 * 関連機関・個人は本ソースコードに関して，その適用可能性も含めて，いかなる保証
 * も行わない．また，本ソースコードの利用により直接的または間接的に生じたいかな
 * る損害に関しても，その責任を負わない．
 *
 *
 */

/*
 * lcd/lcdtest.cmm : 拡張ポートに接続した液晶ディスプレイの動作テスト
 *
 * 2019.08.26 : 液晶の上下をもとに戻す．リセット機能を util.cmm に移動する．
 * 2019.08.18 : 液晶の上下を逆にする
 * 2019.08.09 : 新規作成
 *
 * $Id$
 *
 */

#include <stdio.hmm>
#include <stdlib.hmm>
#include <syslib.hmm>
#include <string.hmm>
#include <crt0.hmm>
#include "util.hmm"
#include "font.hmm"

// 表示関係
#define MaxFname 8
char[] lineBuf = array(128);
char[] locateCom = { '\xb0',   // page address
                     '\x10',   // column address Hi = 0x00
                     '\x00',   // column address Lo = 0x00
                     '\xff' }; // EOF

void locateXY(int x, int y) {
  int x8 = x * 8;
  locateCom[0] = chr(0xb0 | y);             // page address
  locateCom[1] = chr(0x10 | (x8>>4));       // column address Hi
  locateCom[2] = chr(0x00 + (x8 & 0x0f));   // column address Lo
  spiWriteLcdCom(locateCom);
}

void printLine(int l, char[] str) {
  for (int i=0; i<128; i=i+1) {       // 1行バッファをクリアする
    lineBuf[i] = '\x00';
  }
  if (strLen(str)>16) {
    fprintf(stderr, "too long string \"%s\"\n", str);
    exit(1);
  }
  for (int i=0; str[i]!='\0'; i=i+1) {
    char[] f = font(ord(str[i]));
    for (int j=0; j<8; j=j+1) {
      lineBuf[i*8+j] = f[j];
    }
  }
  locateXY(0, l);
  spiWriteLcdDat(lineBuf, 128);
}

// １曲演奏する
#define BUFSIZ 512
char[] datBuf = array(BUFSIZ);
char[][] ch = {"mono","stereo"};

void play(char[] fname) {
  int fd = open(fname, O_RDONLY);
  if (fd<0) {
    perror(fname);
    exit(1);
  }
  spiWriteMp3Reg(0x4, 0);                             // Decode Time をリセット
  fprintf(stderr, "File = %s\n", fname);
  for (int i=0;;) {
    int l = read(fd, datBuf, BUFSIZ);
    if (l<=0) break;
    spiWriteMp3Dat(datBuf, l);
    i = i + BUFSIZ;
    if (i>=4*1024) {                                  // 4KiB 毎に
      int audata = spiReadMp3Reg(0x5);                // Misc. audio data
      int smpRte = ((audata>>1)&0x7fff)/5;            // sample rate / 10
      fprintf(stderr,
              "\r%d0Hz,%s,Time=%ds",
              smpRte,                                 // sample rate / 10
	      ch[audata & 1],                         // mono=0, stereo=1
              spiReadMp3Reg(0x4));                    // Decode Time
      i = 0;
    }
  }
  fprintf(stderr, "\n");
  close(fd);
}

void usage(char[] myname) {
  fprintf(stderr, "Usage : %s [<mp3file>...]\n", myname);
  fprintf(stderr, "<mp3file> : mp3ファイル(拡張子無し)\n");
}

// メインルーチン
char[] strBuf = array(5+MaxFname+5);  //  "/MP3/" + Fname + ".MP3\0"
public int main(int argc, char[][] argv) {
  if (argc>1 && strCmp(argv[1], "-h")==0) {
    usage(argv[0]);
    exit(1);
  }
  // ハードウェアのリセット
  spiResetLcd();
  spiResetMp3();

  // LCD のデモ
  int code = 0x20;
  for (int i=0; i<8; i=i+1) {
    locateXY(0, i);
    for (int j=0; j<16; j=j+1) {
      spiWriteLcdDat(font(code), 8);
      code = code + 1;
      if (code >= 0x7f) code = 0x20;
    }
  }

  // 引数の曲を全て演奏する
  for (int i=1; i<argc; i=i+1) {
    if (strLen(argv[i])>MaxFname) {
      fprintf(stderr, "%s : too long\n", argv[i]);
      exit(1);
    }
    printLine(1, argv[i]);
    strCpy(strBuf, "/MP3/");
    strCat(strBuf, argv[i]);
    strCat(strBuf, ".MP3");
    play(strBuf);
  }
  return 0;
}
