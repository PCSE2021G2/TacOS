/*
 * TacOS Source Code
 *    Tokuyama kousen Advanced educational Computer.
 *
 * Copyright (C) 2019 by
 *                      Dept. of Computer Science and Electronic Engineering,
 *                      Tokuyama College of Technology, JAPAN
 *
 *   上記著作権者は，Free Software Foundation によって公開されている GNU 一般公
 * 衆利用許諾契約書バージョン２に記述されている条件を満たす場合に限り，本ソース
 * コード(本ソースコードを改変したものを含む．以下同様)を使用・複製・改変・再配
 * 布することを無償で許諾する．
 *
 *   本ソースコードは＊全くの無保証＊で提供されるものである。上記著作権者および
 * 関連機関・個人は本ソースコードに関して，その適用可能性も含めて，いかなる保証
 * も行わない．また，本ソースコードの利用により直接的または間接的に生じたいかな
 * る損害に関しても，その責任を負わない．
 *
 *
 */

/*
 * lcdreset/util.cmm : 拡張ポートに接続した液晶ディスプレイの動作テスト
 *
 * 2019.08.26 : SPI のハードウェア化に対応，リセット機能を追加
 * 2019.08.09 : 新規作成
 *
 * $Id$
 *
 */

#include <stdio.hmm>
#include <stdlib.hmm>
#include <syslib.hmm>
#include <crt0.hmm>
#include "util.hmm"

#define DRQ  (_in(0x18)&0x80)
#define BUSY (_in(0x22)!=0)

#define spiWriteByte(v)    \
{                          \
   while(BUSY){};          \
   _out(0x20, v);          \
}

// LCD に連続したコマンドを送る
public void spiWriteLcdCom(char[] com) {
  char[] c = com;
  _out(0x18, 0xcc);                    // A0='0', xCS='0', clk='0'
  _out(0x22, 0x01);                    // SPI クロックを 12.288MHz にする
  for (int i=0; c[i]!='\xff'; i=i+1) {
    spiWriteByte(ord(c[i]));
  }
  while (BUSY) {}                      // SPI の busy が消えるのを待つ
  _out(0x18, 0xdc);                    // A0='0', xCS='1', clk='0'
}

// LCD をリセットする
char[] initCom = { '\x40', '\xa1', '\xc0', '\xa6',
                   '\xa2', '\x2f', '\xf8', '\x00',
                   '\x27', '\x81', '\x10', '\xac',
                   '\x00', '\xaf', '\xff' };          // 0xff=EOF

public void spiResetLcd() {
  _out(0x18, 0x7c);                    // LCD リセット信号ON
  sleep(1);                            // 1ms 待つ
  _out(0x18, 0xfc);                    // LCD リセット信号OFF
  sleep(1);                            // 1ms 待つ
  spiWriteLcdCom(initCom);             // LCD 初期化コマンド
}

// LCD に連続したデータを送る
public void spiWriteLcdDat(char[] dat, int len) {
  char[] d = dat;
  int    l = len;
  _out(0x18, 0xec);                     // A0='1', xCS='0', clk='0'
  _out(0x22, 0x01);                     // SPI クロックを 12.288MHz にする
  for (int i=0; i<l; i=i+1) {
    spiWriteByte(ord(d[i]));
  }
  while(BUSY){};                        // SPI の busy が消えるのを待つ
  _out(0x18, 0xfc);                     // A0='1', xCS='1', clk='0'
}

// MP3 デコーダのレジスタに書く
public void spiWriteMp3Reg(int addr, int arg) {
  _out(0x18, 0xf8);                     // xCS='0', clk='0'
  _out(0x22, 0x03);                     // SPI クロックを 6.144MHz にする
  while (DRQ==0) { sleep(1); }
  spiWriteByte(0x02);                   // SPI Write コマンド
  spiWriteByte(addr);                   // レジスタアドレス
  spiWriteByte(arg>>8);                 // データの上位8ビット
  spiWriteByte(arg);                    // データの下位8ビット
  while(BUSY){};                        // SPI の busy が消えるのを待つ
  _out(0x18, 0xfc);                     // xCS='1', clk='0'
}

// MP3 デコーダのレジスタを読む
public int spiReadMp3Reg(int addr) {
  _out(0x18, 0xf8);                     // xCS='0', clk='0'
  _out(0x22, 0x06);                     // SPI クロックを 3.57MHz にする
  while (DRQ==0) { sleep(1); }          //  読出しはクロックを遅くする必要あり
  spiWriteByte(0x03);                   // SPI Read コマンド
  spiWriteByte(addr);                   // レジスタアドレス
  while(BUSY){};                        // SPI の busy が消えるのを待つ
  _out(0x20, 0);                        // データの上位8ビット読出しを指示
  while(BUSY){};                        // SPI の busy が消えるのを待つ
  int val = _in(0x20);                  // データの上位8ビットを取り出す
  while(BUSY){};                        // SPI の busy が消えるのを待つ
  _out(0x20, 0);                        // データの下位8ビット読出しを指示
  while(BUSY){};                        // SPI の busy が消えるのを待つ
  val = (val << 8) | _in(0x20);         // データの下位8ビットを取り出す
  _out(0x18, 0xfc);                     // xCS='1', clk='0'
  return val;
}

// MP3 デコーダをリセットする
public void spiResetMp3() {
  _out(0x18, 0xbc);                    // MP3 リセット信号OFF
  _out(0x18, 0xfc);                    // MP3 リセット信号OFF (80ns以上)
  sleep(15);                           // 15ms 待つ(2ms以上)
  if (DRQ==0) {
    fprintf(stderr, "\nTime out for DRQ!\n");
    exit(1);
  }
  spiWriteMp3Reg(0x00, 0x0800);        // mode <- NEW mode
  spiWriteMp3Reg(0x03, 0x30d4);        // clock adjust <- 25MHz
  sleep(1);
  spiWriteMp3Reg(0x0b, 0x2020);        // volume set to (-16dB, -16dB)
  sleep(1);
}

// MP3 デコーダにデータを送る
public void spiWriteMp3Dat(char[] dbuf, int len) {
  char[] d = dbuf;
  _out(0x18, 0xf4);                    // xDCS='0', clk='0'
  _out(0x22, 0x03);                    // SPI クロックを 6.144MHz にする
  for (int i=0; i<len; i=i+1) {
    while (DRQ==0) { sleep(1); }
    spiWriteByte(ord(d[i]));           // SPI にデータを送る
  }
  while(BUSY){};                       // SPI の busy が消えるのを待つ
  _out(0x18, 0xfc);                    // xDCS='1', clk='0'
}
