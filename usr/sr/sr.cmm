/*
 * TacOS Source Code
 *    Tokuyama kousen Advanced educational Computer.
 *
 * Copyright (C) 2019 by
 *                      Dept. of Computer Science and Electronic Engineering,
 *                      Tokuyama College of Technology, JAPAN
 *
 *   上記著作権者は，Free Software Foundation によって公開されている GNU 一般公
 * 衆利用許諾契約書バージョン２に記述されている条件を満たす場合に限り，本ソース
 * コード(本ソースコードを改変したものを含む．以下同様)を使用・複製・改変・再配
 * 布することを無償で許諾する．
 *
 *   本ソースコードは＊全くの無保証＊で提供されるものである。上記著作権者および
 * 関連機関・個人は本ソースコードに関して，その適用可能性も含めて，いかなる保証
 * も行わない．また，本ソースコードの利用により直接的または間接的に生じたいかな
 * る損害に関しても，その責任を負わない．
 *
 *
 */

/*
 * sr/sr.cmm : ファイルをシリアルから受信する
 *
 * 2019.10.18 : raw モードで動作する
 * 2019.07.11 : 藤村くんのプログラムを取り込む
 *
 * $Id$
 *
 */
#include <crt0.hmm>
#include <stdio.hmm>
#include <stdlib.hmm>
#include <string.hmm>
#include <syslib.hmm>
#define ACK '!'
#define N 80
char[] buf = array(N);

// ack を送り返す
void ack() {
  buf[0] = ACK;
  ttyWrite(buf, 1);
}

public int main(int argc, char[][] argv) {
  if (argc>1) {
    fprintf(stderr, "Usage: %s\n", argv[0]);
    return 1;
  }

  fgets(buf, N, stdin);                       // ファイル名を受信する
  int pos=strRchr(buf, '\n');
  if (pos==-1) {
    fprintf(stderr, "format error\n");
    exit(1);
  }
  buf[pos] = '\0';
  remove(buf);                                // 念のためファイルを削除する

  FILE fp = fopen(buf, "w");                  // 受信内容を書き込むファイル
  if (fp==null) {
    perror(buf);
    exit(1);
  }

  fgets(buf, N, stdin);                       // ファイル長を受信する
  int fsize = atoi(buf);

  fgets(buf, N, stdin);                       // ブロックサイズを受信する
  int bsize = atoi(buf);
  if (bsize > N) {
    fprintf(stderr, "Error: block size is up to %d\n", N);
    exit(1);
  }

  // 回線のモードを切り換える
  int modeOrig = ttyCtl(TTYCTL_GETMODE, 0);
  int modeChanged = modeOrig & ~TTYCTL_MODE_COOKED & ~TTYCTL_MODE_ECHO;
  ttyCtl(TTYCTL_SETMODE, modeChanged);        // RAWモードに切り換える
  ack();                                      // 準備完了を相手に伝える

  // ファイル転送
  int cfsize = 0;                             // これまでに受信したバイト数
  int cbsize = 0;                             // 現ブロックで受信したバイト数
  while (_uCmp(fsize, cfsize) > 0) {          // ファイルサイズに達するまで
    int n = fsize - cfsize;                   //   残りバイト数
    if (_uCmp(n, bsize) > 0) n = bsize;       //   ブロックサイズを上限にする
    int len = ttyRead(buf, n);                //   受信する
    for (int k = 0; k < len; k = k + 1) {     //   受信したバイトについて
      fputc(buf[k], fp);                      //     ファイルに書き込む
      cbsize = cbsize + 1;                    //     受信バイト数更新
      cfsize = cfsize + 1;
      if (cbsize >= bsize) {                  //     ブロックサイズに達したら
        ack();                                //        ACK を返す
        cbsize = 0;                           //        バイト数をクリア
      }
    }
  }
  fclose(fp);                                 // ファイルを閉じて
  ack();                                      // 転送完了を相手に伝える
  ttyCtl(TTYCTL_SETMODE, modeOrig);           // COOKEDモードに戻す
  return 0;
}
