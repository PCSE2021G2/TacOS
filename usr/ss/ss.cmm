/*
 * TacOS Source Code
 *    Tokuyama kousen Advanced educational Computer.
 *
 * Copyright (C) 2019 by
 *                      Dept. of Computer Science and Electronic Engineering,
 *                      Tokuyama College of Technology, JAPAN
 *
 *   上記著作権者は，Free Software Foundation によって公開されている GNU 一般公
 * 衆利用許諾契約書バージョン２に記述されている条件を満たす場合に限り，本ソース
 * コード(本ソースコードを改変したものを含む．以下同様)を使用・複製・改変・再配
 * 布することを無償で許諾する．
 *
 *   本ソースコードは＊全くの無保証＊で提供されるものである。上記著作権者および
 * 関連機関・個人は本ソースコードに関して，その適用可能性も含めて，いかなる保証
 * も行わない．また，本ソースコードの利用により直接的または間接的に生じたいかな
 * る損害に関しても，その責任を負わない．
 *
 *
 */

 /*
  * ss/ss.cmm : ファイル送信プログラム
  *
  * 2019.10.21 : 完成
  * 2019.01.28 : 新規作成
  *
  * $Id$
  *
  */
#include <stdio.hmm>
#include <stdlib.hmm>
#include <string.hmm>

#define BLOCK_SIZE 60
#define BUFFER_SIZE 128
#define ACK '!'

int[] filesize = array(2);
char[] buffer = array(BUFFER_SIZE);

// Ackを待つ
void waitForAck(){
  fprintf(stderr, ".");
  fflush(stdout);
  for (;;) {
    char ack = fgetc(stdin);
    if (ack == ACK) break;
  }
}

public int main(int argc, char[][] argv){
  if (argc < 2) {                                // ファイル名がない
    fprintf(stderr,
            "Usage: %s <filename> [<as filename>]\n",
            argv[0]);
    return 1;
  }

  if (fsize(argv[1], filesize)){                 // ファイル長を取得
    perror(argv[1]);
    return 1;
  }
  if (filesize[0]>0 || filesize[1]>0xFFFF) {     // 64KiBより大きなファイル
    fprintf(stderr, "%s : Too large file\n", argv[1]);
    return 1;
  }

  FILE fp = fopen(argv[1], "r");                 // 送信するファイル
  if (fp == null){
    perror(argv[1]);
    return 1;
  }

  printf("sr\n");                                // TaC側のプログラム起動
  char[] filename = argv[1];
  if (argc>=3) filename = argv[2];
  printf("%s\n", filename);                      // ファイル名を出力
  printf("%d\n", filesize[1]);                   // ファイル長の下位32bit
  printf("%d\n", BLOCK_SIZE);                    // ブロックサイズ
  waitForAck();                                  // 相手の準備完了を待つ

  int length = 0;
  for (int i=filesize[1]; i>0; i=i-1){           // ファイルの長さ繰り返す
    char c = fgetc(fp);
    fputc(c, stdout);
    length = length + 1;
    if (length == BLOCK_SIZE){
      waitForAck();
      length = 0;
    }
  }
  waitForAck();                                  // 相手が終了した
  fprintf(stderr, "\n");
  return 0;
}
